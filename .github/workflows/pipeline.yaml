name: CI/CD pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

env:
  HUSKY: 0
  PNPM_VERSION: "10"
  NODE_VERSION: "24"
  STATIC_ANALYSIS_DEPS: "@eslint/css|@eslint/js|eslint|gh-pages|husky|lint-staged|prettier"

jobs:
  # Detect changes in specific dependencies
  detect-dep-changes:
    runs-on: ubuntu-latest
    outputs:
      only-static-analysis-deps-changed: ${{ steps.check-changes.outputs.only-static-analysis-deps-changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check for changes in specific dependencies
        id: check-changes
        run: |
          # Get the list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For pull requests, compare with the base branch
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            # For pushes, compare with the previous commit
            CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if only package.json and/or pnpm-lock.yaml changed
          ONLY_LOCK_FILES_CHANGED=true
          OTHER_FILES_CHANGED=false

          while IFS= read -r file; do
            if [ -n "$file" ]; then
              if [ "$file" = "package.json" ] || [ "$file" = "pnpm-lock.yaml" ]; then
                echo "Lock file changed: $file"
              else
                echo "Other file changed: $file"
                OTHER_FILES_CHANGED=true
                ONLY_LOCK_FILES_CHANGED=false
                break
              fi
            fi
          done <<< "$CHANGED_FILES"

          if [ "$ONLY_LOCK_FILES_CHANGED" = true ] && [ "$OTHER_FILES_CHANGED" = false ]; then
            echo "Only lock files changed, checking for specific dependency changes..."
            
            # Get the diff of package.json
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              PACKAGE_DIFF=$(git diff origin/${{ github.base_ref }}...HEAD -- package.json)
            else
              PACKAGE_DIFF=$(git diff HEAD~1...HEAD -- package.json)
            fi
            
            # Check if only the specified dependencies changed
            # Extract added/removed/modified dependencies
            ADDED_DEPS=$(echo "$PACKAGE_DIFF" | grep -E "^\+.*\"($STATIC_ANALYSIS_DEPS)\":" | sed 's/^\+.*"\([^"]*\)".*/\1/' | tr '\n' ' ')
            REMOVED_DEPS=$(echo "$PACKAGE_DIFF" | grep -E "^-.*\"($STATIC_ANALYSIS_DEPS)\":" | sed 's/^-.*"\([^"]*\)".*/\1/' | tr '\n' ' ')
            MODIFIED_DEPS=$(echo "$PACKAGE_DIFF" | grep -E "^[+-].*\"($STATIC_ANALYSIS_DEPS)\":" | sed 's/^[+-].*"\([^"]*\)".*/\1/' | sort | uniq -d | tr '\n' ' ')
            
            echo "Added dev deps: '$ADDED_DEPS'"
            echo "Removed dev deps: '$REMOVED_DEPS'"
            echo "Modified dev deps: '$MODIFIED_DEPS'"
            
            # Check if any other dependencies changed
            OTHER_DEPS_CHANGED=$(echo "$PACKAGE_DIFF" | grep -E "^[+-].*\"[^@][^/]*\":" | grep -v -E "^[+-].*\"($STATIC_ANALYSIS_DEPS)\":" | wc -l)
            
            if [ "$OTHER_DEPS_CHANGED" -eq 0 ] && { [ -n "$ADDED_DEPS" ] || [ -n "$REMOVED_DEPS" ] || [ -n "$MODIFIED_DEPS" ]; }; then
              echo "only-static-analysis-deps-changed=true" >> $GITHUB_OUTPUT
              echo "Only development dependencies changed: $ADDED_DEPS $REMOVED_DEPS $MODIFIED_DEPS"
            else
              echo "only-static-analysis-deps-changed=false" >> $GITHUB_OUTPUT
              echo "Other dependencies also changed or no dev deps changed"
            fi
          else
            echo "only-static-analysis-deps-changed=false" >> $GITHUB_OUTPUT
            echo "Files other than lock files changed"
          fi

  # Check linting and formatting
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Linting
        run: pnpm eslint . --max-warnings 0

      - name: Check formatting
        run: pnpm prettier --check .

  # Build the project
  build:
    needs:
      - detect-dep-changes
    runs-on: ubuntu-latest
    if: needs.detect-dep-changes.outputs.only-static-analysis-deps-changed != 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Clean-up of the output directory for build
        run: pnpm clean

      - name: Build the project
        run: pnpm build

  # Run unit tests
  test:
    needs:
      - detect-dep-changes
    runs-on: ubuntu-latest
    if: needs.detect-dep-changes.outputs.only-static-analysis-deps-changed != 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test

  # Run end-to-end tests with Playwright
  e2e:
    needs:
      - static-analysis
      - build
      - test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Clean-up of the test results
        run: pnpm clean

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

      - name: Install browsers for Playwright
        run: pnpm playwright install --with-deps

      - name: Run E2E tests
        run: pnpm e2e

      - name: Upload Playwright results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: test-results/
          retention-days: 21

  # Deploy to GitHub Pages
  deploy:
    needs:
      - e2e
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: deploy_gh_pages
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Clean-up of the test results
        run: pnpm clean

      - name: Build the project
        run: pnpm build

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist/test-data-generator

  # Check whether all jobs succeeded/skipped that are potentially run for pull requests (needed to block PRs in case of pipeline fails)
  pr-jobs-succeeded:
    needs:
      - static-analysis
      - build
      - test
      - e2e
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Check job status
        run: |
          result_static_analysis="${{ needs.static-analysis.result }}"
          result_build="${{ needs.build.result }}"
          result_test="${{ needs.test.result }}"
          result_e2e="${{ needs.e2e.result }}"
          fail=0
          for result in result_static_analysis result_build result_test result_e2e; do
            value="${!result}"
            echo "result value: $value"
            if [ "$value" = "failure" ]; then
              fail=1
            fi
          done
          if [ $fail -eq 1 ]; then
            exit 1
          fi
