name: CI/CD pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 8 * * 6" # every Saturday at 8:00 UTC
  workflow_dispatch:

permissions:
  contents: write

env:
  HUSKY: 0
  PNPM_VERSION: "10"
  NODE_VERSION: "24"
  BUILD_ARTIFACT_NAME: "test-data-generator-build-output"
  BUILD_ARTIFACT_FOLDER: "dist/test-data-generator"

jobs:
  # Check linting and formatting
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 #v4.2.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 #v6.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Linting
        run: pnpm eslint . --max-warnings 0

      - name: Check formatting
        run: pnpm prettier --check .

  # Build the project
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 #v4.2.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 #v6.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Clean-up of the output directory for build
        run: pnpm clean

      - name: Build the project
        run: pnpm build

      - name: Upload build artifact
        if: github.ref == 'refs/heads/main' # build artifact is only needed for deployment
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 #v5.0.0
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: ${{ env.BUILD_ARTIFACT_FOLDER }}
          if-no-files-found: "error"
          retention-days: 1

  # Run unit tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 #v4.2.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 #v6.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test

  # Run end-to-end tests with Playwright
  e2e:
    needs:
      - static-analysis
      - build
      - test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 #v4.2.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 #v6.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Clean-up of the test results
        run: pnpm clean

      - name: Cache Playwright browsers
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 #v4.3.0
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install browsers for Playwright
        run: pnpm playwright install --with-deps

      - name: Run E2E tests
        run: pnpm e2e

      - name: Upload Playwright results
        if: failure()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 #v5.0.0
        with:
          name: playwright-results
          path: test-results/
          retention-days: 7

  # Deploy to GitHub Pages
  deploy-gh-pages:
    needs:
      - e2e
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: deploy_gh_pages
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Download build artifact
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 #v6.0.0
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: ${{ env.BUILD_ARTIFACT_FOLDER }}

      - name: List downloaded artifact files
        run: |
          echo "Contents of ${{ env.BUILD_ARTIFACT_FOLDER }}:"
          ls -R "${{ env.BUILD_ARTIFACT_FOLDER }}"

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@6c2d9db40f9296374acc17b90404b6e8864128c8 #v4.7.3
        with:
          folder: ${{ env.BUILD_ARTIFACT_FOLDER }}

  # Deploy to Cloudflare Pages
  deploy-cf-pages:
    needs:
      - e2e
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: deploy_cf_pages
    env:
      HOOK_ID: ${{ secrets.CLOUDFLARE_DEPLOY_HOOK_ID }}
    steps:
      - name: Trigger deployment to Cloudflare Pages
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -d "" "https://api.cloudflare.com/client/v4/pages/webhooks/deploy_hooks/${HOOK_ID}")
          echo "HTTP response status: $STATUS"
          if [ "$STATUS" -ne 200 ]; then
            echo "Deployment trigger failed!"
            exit 1
          fi
